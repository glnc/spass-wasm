/**
 * This file adds some functions to the CommonJS module generated by emscripten.
 * The file should be included in the build by adding the --pre-js argument to emcc.
 */

// Module.preRun is an array of functions called before the module is initalized.
Module.preRun = Module.preRun || [];
Module.preRun.push(addMyStdOut);
Module.preRun.push(addRun);

/**
 * Add the MyStdout object to the module.
 * MyStdout is used to buffer the standard output of the web assembly.
 */
function addMyStdOut () {
	let MyStdout = {};

	MyStdout._buffer = "";
	MyStdout._contents = "";

	MyStdout.getContents = function () {
		return MyStdout._contents;
	};

	MyStdout.clear = function () {
		MyStdout._contents = "";
	};

	MyStdout.flush = function () {
		MyStdout.print();
	};

	MyStdout.print = function (charCode = null) {
		if (charCode !== null) {
			MyStdout._buffer += String.fromCharCode(charCode);
		}
		else {
			// flush buffer
			MyStdout._contents += MyStdout._buffer;
			MyStdout._buffer = "";
		}
	};

	Module.MyStdout = MyStdout;

	// all outputs go to MyStdout
	FS.init(
		charcode => { Module.MyStdout.print(charcode) },
		charcode => { Module.MyStdout.print(charcode) },
		charcode => { Module.MyStdout.print(charcode) }
	);
}

/**
 * Add a function that wraps the main call.
 */
function addRun () {
	/**
	 * Call main.
	 * input is the content of the input file.
	 * args can be used to pass additional command line arguments
	 */
	Module.run = function (input = "", args = []) {
		Module.MyStdout.clear();

		FS.writeFile("input", input);
		args.push("/input");
		callMain(args);

		Module.MyStdout.flush();

		FS.unlink("input");

		return Module.MyStdout.getContents();
	}
}
